plugins {
    id 'java'
    id 'org.springframework.boot' version "${springBootVersion}"
}

apply plugin: 'io.myplant.gradle.dockerbuild'

ext {
    mapstructVersion = '1.5.5.Final'
}

dependencies {
    // spring
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('org.springframework.boot:spring-boot-starter-security')

    // Access own API
    implementation project(':TEMPLATE_PROJECT-api')

    // enable next two lines and decided which database you need
//    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
//    implementation('org.flywaydb:flyway-core')
//    implementation('mysql:mysql-connector-java')
//    implementation ("org.postgresql:postgresql")

    // add only the commons libs you need
    implementation "io.myplant:commons:${commonsVersion}"
    implementation "io.myplant:commons-rest:${commonsVersion}"
    implementation "io.myplant:commons-networking:${commonsVersion}"
    implementation "io.myplant:commons-feign-blocking:${commonsVersion}"

    implementation('org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0')

    // feign
    implementation('org.springframework.cloud:spring-cloud-starter-openfeign')
    implementation('io.github.openfeign:feign-httpclient')

    // add useful tools as needed
//    implementation('com.google.guava:guava:30.1-jre')

    // log
    runtimeOnly('net.logstash.logback:logstash-logback-encoder:7.4')

    // testing (Junit 5 tests):
    testImplementation ('org.springframework.boot:spring-boot-starter-test') {
        exclude group: "org.junit.vintage"
    }
    testImplementation('org.hamcrest:hamcrest-all:1.3')
    testImplementation('com.jayway.jsonpath:json-path:2.9.0')
}

// Task configurations

bootJar {
    archiveFileName = "${artifactName}.jar"
}

jar {
    enabled = false
    archiveFileName = "${artifactName}.jar"
}

bootRun {
    args = ['--spring.profiles.active=' + System.properties.get('spring.profiles.active', 'dev')]
}

innioDockerBuild {
    tagname artifactName
    repositoryName 'myplant-io'
}
